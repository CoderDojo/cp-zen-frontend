---
version: 2
jobs:
  build-test:
    working_directory: ~/cp-zen-frontend
    docker:
      - image: node:8.4
        environment:
          LANG: en_US.utf8
          WDIO_MAX_INSTANCES: 1
    steps:
      - checkout
      - run:
          name: install chrome
          command: |
            set -eo pipefail
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            google-chrome --version
            wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
            sudo apt-get update
            sudo apt-get --only-upgrade install google-chrome-stable
            google-chrome --version
      - run: sudo apt-get install jq
      - restore_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn
      - save_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - run:
          name: install testing dependencies
          command: BUILD_BRANCH=$CIRCLE_BRANCH GITHUB_USERNAME=$CIRCLE_PR_USERNAME ./build/get_cd_deps.sh
      - run:
          name: Build
          command: GIT_BRANCH=$CIRCLE_BRANCH yarn build
      - run:
          name: Tests
          command: yarn test
      - save_cache:
          key: build-cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - dist
  publish:
    working_directory: ~/cp-zen-frontend
    docker:
      - image: node:8.4
    steps:
      - checkout
      - restore_cache:
          key: build-cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: setup git
          command: |
            set -eo pipefail
            git config --global user.email "webteam@coderdojo.com"
            git config --global user.name "CoderDojo Foundation"
      - run:
          name: publish to git and npm
          command: |
            npm version patch -m "[skip ci] Update to %s"
            git push
            npm publish
  nightly:
    working_directory: ~/cp-zen-frontend
    docker:
      - image: node:8.4
    steps:
      - checkout
      - restore_cache:
          key: build-cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: publish
          command: |
            npm --no-git-tag-version version `node build/get-version.js`-`git rev-parse --short HEAD`
            npm publish --tag=staging
  deploy:
    working_directory: ~
    docker:
      - image: node:8.4
    steps:
      - run:
          name: checout repo
          command: |
            git clone git@github.com:CoderDojo/cp-zen-platform.git
            cd cp-zen-platform
            git config --global user.email "webteam@coderdojo.com"
            git config --global user.name "CoderDojo Foundation"
      - run:
          name: Update frontend
          command: |
            set -eo pipefail
            yarn add cp-zen-frontend cp-translations
            git add .
            git commit -m "[ci] Update frontend"
            git push
  stage:
    working_directory: ~
    docker:
      - image: node:8.4
    steps:
      - run:
          name: checout repo
          command: |
            git clone git@github.com:CoderDojo/cp-zen-platform.git
            cd cp-zen-platform
            git config --global user.email "webteam@coderdojo.com"
            git config --global user.name "CoderDojo Foundation"
      - run:
          name: Update frontend
          command: |
            set -eo pipefail
            yarn add cp-zen-frontend@staging cp-translations@staging
            git add .
            git commit -m "[ci] Update frontend"
            git push

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build-test
      - publish:
          requires:
            - build-test
          filters:
            branches:
              only:
                - master
      - nightly:
          requires:
            - build-test
          filters:
            branches:
              only:
                - staging
      - deploy:
          requires:
            - publish
      - stage:
          requires:
            - nightly
