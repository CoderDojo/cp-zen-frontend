---
version: 2
jobs:
  build:
    working_directory: ~/cp-zen-frontend
    docker:
      - image: circleci/node:8-browsers
        environment:
          LANG: en_US.utf8
    steps:
      - checkout
      - run:
          name: Install jq
          command: |
            sudo apt-get update
            sudo apt-get install jq
      - restore_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: |
            yarn
            BUILD_BRANCH=$CIRCLE_BRANCH GITHUB_USERNAME=$CIRCLE_PR_USERNAME .circleci/get_cd_deps.sh
      - save_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - save_cache:
          key: cypress-bin-cache-{{ checksum "yarn.lock" }}
          paths:
            - /home/circleci/.cache/Cypress
      - run:
          name: Build
          command: GIT_BRANCH=$CIRCLE_BRANCH yarn build
      - save_cache:
          key: build-cache-{{ .Revision }}
          paths:
            - dist
  test-e2e:
    working_directory: ~/cp-zen-frontend
    docker:
      - image: circleci/node:8
        environment:
          EXTERNAL_SELENIUM: 1
      - image: selenium/standalone-chrome:3
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "yarn.lock" }}
            - dependency-cache
      - restore_cache:
          keys:
            - build-cache-{{ .Revision }}
            - build-cache
      - run:
          name: Tests
          command: yarn e2e-with-mocks
      - store_artifacts:
          path: errorShots
  test-unit:
    working_directory: ~/cp-zen-frontend
    docker:
      - image: circleci/node:8-browsers
        environment:
          LANG: en_US.utf8
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "yarn.lock" }}
            - dependency-cache
      - restore_cache:
          keys:
            - build-cache-{{ .Revision }}
            - build-cache
      - run:
          name: Tests
          command: yarn unit
  test-lint:
    working_directory: ~/cp-zen-frontend
    docker:
      - image: circleci/node:8-browsers
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "yarn.lock" }}
            - dependency-cache
      - restore_cache:
          keys:
            - build-cache-{{ .Revision }}
            - build-cache
      - run:
          name: Tests
          command: yarn lint
  test-cypress:
    working_directory: ~/cp-zen-frontend
    docker:
      - image: circleci/node:8-browsers
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "yarn.lock" }}
            - dependency-cache
      - restore_cache:
          keys:
            - build-cache-{{ .Revision }}
            - build-cache
      - restore_cache:
          keys:
            - cypress-bin-cache-{{ checksum "yarn.lock" }}
            - cypress-bin-cache
      - run:
          name: Tests
          command: yarn cypress
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/screenshots
  publish:
    working_directory: ~/cp-zen-frontend
    docker:
      - image: circleci/node:8-browsers
    steps:
      - add-ssh-keys:
          fingerprints:
            - "c5:a2:f8:c3:ad:66:f3:c8:a2:f1:2c:99:63:d8:63:b6"
      - checkout
      - restore_cache:
          keys:
            - build-cache-{{ .Revision }}
            - build-cache
      - run:
          name: setup git and npm
          command: |
            set -eo pipefail
            git config --global user.email "webteam@coderdojo.com"
            git config --global user.name "CoderDojo Foundation"
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            yarn config set version-git-message "[skip ci] Update to %s" # Skip CI or infinite loop
            yarn config set version-commit-hooks false # We're after the tests 
      - run:
          name: publish to git and npm
          command: |
            yarn version --patch 
            git push
            yarn publish --non-interactive
      - run: {
        "name": "update_platform",
        "command": "sh .circleci/update_platform.sh $(node build/get-version.js) master"
      }
workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build
      - test-unit:
          requires:
            - build
    # - test-e2e:
    #      requires:
    #        - build
      - test-lint:
          requires:
            - build
      - test-cypress:
          requires:
            - build
      - publish:
          requires:
            - test-unit
            - test-lint
            - test-cypress
          filters:
            branches:
              only:
                - master
